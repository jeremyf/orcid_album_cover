#!/usr/bin/env ruby
require 'rest_client'
require 'nokogiri'
require 'capybara'
require 'capybara/rspec'
require 'uri'
require 'capybara-webkit'
require 'fileutils'

module Orcid
  class Work
    include Capybara::DSL
    attr_reader :title
    def initialize(document)
      @document = document
    end

    def title
      @title ||= begin
        title_parts = []
        title_parts << @document.css('work-title title').text
        title_parts << @document.css('work-title subtitle').text
        title_parts.join(': ')
      end
    end

    def location
      @location ||= resolve_doi || find_representative_url || ''
    end

    def location_not_found?
      location.to_s.size == 0
    end

    def location_exists?
      !location_not_found?
    end

    def doi
      find_doi
    end

    def screenshot_exists?
      @screenshot_exists
    end

    def save_screenshot(directory)
      if location_exists?
        uri = URI.parse(location)
        begin
          Capybara.current_driver = :webkit
          Capybara.run_server = false
          Capybara.app_host = "#{uri.scheme}://#{uri.host}"
          visit(uri.path)
          page.save_screenshot(File.join(directory, filename))
          @screenshot_exists = true
        rescue Capybara::Webkit::InvalidResponseError
          @screenshot_exists = false
          # Silently failing is good?
        end
      end
    end

    def filename(prefix = nil)
      if prefix
        "#{prefix}-#{location.hash}.png"
      else
        "#{location.hash}.png"
      end
    end

    private
    def resolve_doi
      doi = find_doi
      return nil if doi.nil?
      begin
        response = RestClient.get("http://dx.doi.org/#{doi}", accept: :html) { |resp, request, result| resp }
        response.headers.fetch(:location)
      rescue RestClient::Exception
        nil
      end
    end

    def find_doi
      @dois ||= []
      return @dois.first if @dois.first
      @document.css('work-external-identifier').each do |node|
        if node.css('work-external-identifier-type').text =~ /^doi$/i
          doi = node.css('work-external-identifier-id').text
          if !doi.to_s.empty?
            if doi =~ /^https?\:/
              uri = URI.parse(doi)
              @dois << uri.path.sub(/^\//, '')
            else
              @dois << doi
            end
          end
        end
      end
      return @dois.first
    end

    def find_representative_url
      @representative_urls ||= []
      return @representative_urls.first if @representative_urls.first
      @document.css('url').each do |node|
        text = node.text
        @representative_urls << text if ! text.to_s.empty?
      end
      return @representative_urls.first
    end
  end

  class AlbumCover
    attr_reader :orcid_profile_id, :host, :person_name
    def initialize(orcid_profile_id, options = {})
      @orcid_profile_id = orcid_profile_id
      @host = options.fetch(:host) { 'http://pub.orcid.org/' }
      @format = options.fetch(:format) { 'png' }.to_s
    end

    def call
      FileUtils.rm_rf(directory)
      FileUtils.mkdir_p(directory)
      find_person_name
      find_works
      guard_no_work_locations
      screenscrap_locations
      generate_cropped_files
      if @format.to_s == 'html'
        generate_html_carosel
      else
        generate_final_file
      end
    end

    private

    def generate_html_carosel
      bootstrap_directory = File.expand_path('../../bootstrap', __FILE__)
      template = []
      template << "<html>"
      template << %(<link href="file://#{File.join(bootstrap_directory, '/css/bootstrap.min.css')}" rel="stylesheet">)
      template << %(<style>)
      template << %(.item img { height: 400px; })
      template << %(.thumbnail .title { padding-top: 10px; height: 100px; font-size: 1em;})
      template << %(</style>)
      template << "<body>"
      template << "<h2>#{person_name}</h2>"
      template << "<h3><a href='https://orcid.org/#{orcid_profile_id}'>#{orcid_profile_id}<h3>"
      template << %(<ul class="thumbnails">)
      @works.each_with_index do |work, index|
        if work.screenshot_exists?
          filename = File.join(directory, work.filename("cropped"))
          template << %(<li class="span4">)
          template << %(<div class="thumbnail">)
          template << %(<a href="#{work.location}">)
          template << %(<img data-src="holder.js/300x300" style="width: 300px height: 300px;" alt="#{work.title}" src="file://#{filename}">)
          template << %(<p class="title">#{work.title}</p>)
          template << %(</a>)
          template << %(</div>)
          template << %(</li>)
        end
      end
      template << "</ul>"
      template << "</body>"
      template << "</html>"
      puts template.join("\n")
    end

    def generate_cropped_files
      Dir["#{File.join(directory, '*.png')}"].each do |filename|
        cropped_filename = File.join(directory, "cropped-#{File.basename(filename)}")
        `convert #{filename}  -thumbnail 300x300^ -gravity north -extent 300x300  #{cropped_filename}`
      end
    end

    def generate_final_file
      files = Dir["#{File.join(directory, 'cropped-*.png')}"]
      output_filename = "#{directory}.png"
      final_filename = "#{File.dirname(directory)}/final-#{File.basename(directory)}.png"
      `cd #{@directory} && montage #{files.join(' ')} -geometry 300x300+2+2 #{output_filename}`
      width = `identify -format %w #{output_filename}`.strip
      height = `identify -format %h #{output_filename}`.strip
      `convert -background '#0008' -fill white -gravity center -size #{width}x#{(height.to_i * 0.2).to_i} caption:"#{person_name} #{orcid_profile_id}" #{output_filename} +swap -gravity north -composite #{final_filename}`
      `open #{final_filename}`
    end

    def directory
      @directory ||= File.expand_path("../../tmp/#{orcid_profile_id}", __FILE__)
    end

    def profile_works_uri
      File.join(host, "v1.1/#{orcid_profile_id}/orcid-works")
    end

    def profile_uri
      File.join(host, "v1.1/#{orcid_profile_id}")
    end

    def find_person_name
      response = RestClient.get(profile_uri, accept: :xml)
      document = Nokogiri::XML(response)
      personal_details = document.css('personal-details')
      @person_name = ''
      credit_name = personal_details.css('credit-name').text
      if ! credit_name.empty?
        @person_name = credit_name
      else
        given_name = personal_details.css('given-names').text
        if ! given_name.empty?
          @person_name += " #{given_name}"
        end
        family_name = personal_details.css('family-name').text
        if ! family_name.empty?
          @person_name += " #{family_name}"
        end
        @person_name.strip
      end
    end

    def find_works
      response = RestClient.get(profile_works_uri, accept: :xml)
      document = Nokogiri::XML(response)
      @works = []
      document.css('orcid-works orcid-work').each do |work_node|
        @works << Work.new(work_node)
      end
    end

    def guard_no_work_locations
      if @works.empty?
        STDERR.puts "No works found for ORCID: #{orcid_profile_id}."
        exit(-1)
      end
      if @works.all? {|work| work.location_not_found? }
        STDERR.puts "No DOIs nor URIs found for ORCID: #{orcid_profile_id}."
        exit(-1)
      end
    end

    def screenscrap_locations
      @works.each do |work|
        work.save_screenshot(directory)
      end
    end

  end
end

options = {}
require 'optparse'
FORMATS = ['html', 'png']
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} DDDD-DDDD-DDDD-DDDD [options]"
  opts.on("--format [FORMAT]", FORMATS, "With format: #{FORMATS.join(', ')}") do |f|
    options[:format] = f
  end
end.parse!

if ARGV[0].to_s =~ /^\d{4}-\d{4}-\d{4}-\d{4}$/
  orcid_profile_id = ARGV[0]
  album_cover = Orcid::AlbumCover.new(orcid_profile_id, options)
  album_cover.call
else
  # Thank you Erik Lease Morgan for having lots of DOIs
  STDERR.puts "Include a valid ORCiD:"
  STDERR.puts "$ #{File.basename(__FILE__)} DDDD-DDDD-DDDD-DDDD"
  STDERR.puts "\n\tIf you don't have one, consider using 0000-0002-9952-7800"
  exit!(-1)
end